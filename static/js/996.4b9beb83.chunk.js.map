{"version":3,"file":"static/js/996.4b9beb83.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","redux/filter/selectors.js","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","pages/Contacts.js"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n","export const selectFilter = state => state.filter;\n","import styled from 'styled-components';\n\nexport const Input = styled.input`\n  display: block;\n  padding: 10px;\n  border-radius: 4px;\n  font-size: 22px;\n`;\nexport const Label = styled.label`\n  display: block;\n  padding: 10px;\n  border-radius: 4px;\n  font-size: 22px;\n`;\nexport const Div = styled.div`\n  padding: 12px 12px 12px 0px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filter/filtersSlice';\nimport { selectFilter } from 'redux/filter/selectors';\n\nimport { Div } from './Filter.styled';\nimport Input from '@mui/material/Input';\nimport InputLabel from '@mui/material/InputLabel';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport AccountCircle from '@mui/icons-material/AccountCircle';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const value = useSelector(selectFilter);\n  const onChangeFilter = e => {\n    dispatch(setFilter(e.currentTarget.value));\n  };\n  return (\n    <Div>\n      <h2>Contacts</h2>\n      <InputLabel htmlFor=\"input-with-icon-adornment\">\n        Filter contacts by name\n      </InputLabel>\n      <Input\n        type=\"text\"\n        value={value}\n        onChange={onChangeFilter}\n        id=\"input-with-icon-adornment\"\n        startAdornment={\n          <InputAdornment position=\"start\">\n            <AccountCircle />\n          </InputAdornment>\n        }\n      />\n      {/* <Label>\n        Filter contacts by name\n        <Input type=\"text\" value={value} onChange={onChangeFilter}></Input>\n      </Label> */}\n    </Div>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  padding: 12px 60px 12px 12px;\n  min-width: 400px;\n`;\nexport const Item = styled.li`\n  margin: 12px;\n  display: flex;\n  justify-content: space-between;\n  border-bottom: 1px coral solid;\n  font-size: 18px;\n  letter-spacing: 2px;\n`;\nexport const Label = styled.input`\n  display: block;\n  padding: 10px;\n  border-radius: 4px;\n  font-size: 22px;\n`;\n\nexport const Div = styled.div`\n  display: flex;\n  align-items: center;\n  min-width: 300px;\n`;\nexport const NameDiv = styled.div`\n  margin-left: 40px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { selectFilter } from 'redux/filter/selectors';\nimport { Item, List, Div, NameDiv } from './ContactList.styled';\nimport IconButton from '@mui/material/IconButton';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { AvatarGenerator } from 'random-avatar-generator';\nimport Avatar from '@mui/material/Avatar';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch(selectFilter);\n  const generator = new AvatarGenerator();\n\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const visiableContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return (\n    <List>\n      {visiableContacts.map(({ name, number, id }) => {\n        return (\n          <Item key={id}>\n            <Div>\n              <Avatar alt=\"#\" src={generator.generateRandomAvatar()} />\n              <NameDiv>\n                {name}: {number}\n              </NameDiv>\n            </Div>\n            <IconButton\n              aria-label=\"delete\"\n              onClick={() => {\n                dispatch(deleteContact(id));\n              }}\n            >\n              <DeleteIcon />\n            </IconButton>\n          </Item>\n        );\n      })}\n    </List>\n  );\n};\n","import styled from 'styled-components';\nimport { Form as FormikForm, ErrorMessage as Error } from 'formik';\nimport Button from '@mui/material/Button';\n\nexport const Form = styled(FormikForm)`\n  border: 1px solid black;\n  display: flex;\n  flex-direction: column;\n  padding: 12px;\n`;\nexport const ErrorMessage = styled(Error)`\n  color: red;\n  font-size: 13px;\n`;\nexport const DivButton = styled(Button)`\n  width: 200px;\n  font-size: 12px;\n  margin-left: 10px;\n`;\nexport const Input = styled.input`\n  display: block;\n  padding: 10px;\n  border-radius: 4px;\n  font-size: 22px;\n`;\nexport const Label = styled.label`\n  display: block;\n  padding: 10px;\n  border-radius: 4px;\n  font-size: 22px;\n`;\n","import React from 'react';\nimport { Formik, Field } from 'formik';\nimport PropTypes from 'prop-types';\nimport {\n  Form,\n  ErrorMessage,\n  Label,\n  Input,\n  DivButton,\n} from './ContactForm.styled';\nimport * as yup from 'yup';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport SendIcon from '@mui/icons-material/Send';\n\nyup.addMethod(yup.string, 'validation', function () {\n  return this.matches(\n    \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\n    \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n  );\n});\nyup.addMethod(yup.string, 'numeric', function () {\n  return this.matches(\n    '^[+]?[(]?[0-9]{3}[)]?[-s.]?[0-9]{3}[-s.]?[0-9]{4,6}$',\n    'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n  );\n});\n\nconst Schema = yup.object().shape({\n  name: yup.string().validation().required(),\n  number: yup.string().numeric().required(),\n});\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const onChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n  const onSubmit = ({ name, number }) => {\n    const isExist = contacts.find(contact => contact.name === name);\n    if (isExist && number) {\n      window.alert(`${name} is already in contacts`);\n      return;\n    } else {\n      const contact = {\n        name,\n        number,\n      };\n      dispatch(addContact(contact));\n    }\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={{ name: '', number: '' }}\n        validationSchema={Schema}\n        onSubmit={values => {\n          onSubmit(values);\n          resetForm();\n        }}\n      >\n        <Form>\n          <Field as={Label}>\n            <span>Name</span>\n            <Field\n              as={Input}\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              onChange={onChange}\n            />\n            <ErrorMessage name=\"name\" component=\"div\" />\n          </Field>\n          <Field as={Label}>\n            <span>Number</span>\n            <Field\n              as={Input}\n              type=\"tel\"\n              name=\"number\"\n              value={number}\n              onChange={onChange}\n            />\n            <ErrorMessage name=\"number\" component=\"div\" />\n          </Field>\n          <DivButton\n            variant=\"contained\"\n            endIcon={<SendIcon />}\n            type=\"submit\"\n            disabled={!name || !number}\n          >\n            Add contact\n          </DivButton>\n        </Form>\n      </Formik>\n    </>\n  );\n};\nContactForm.propTypes = {\n  onSubmit: PropTypes.func,\n  onChange: PropTypes.func,\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\n\nimport { fetchContacts } from 'redux/contacts/operations';\nimport {\n  selectContacts,\n  selectError,\n  selectIsLoading,\n} from 'redux/contacts/selectors';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactForm } from 'components/ContactForm/ContactForm.jsx';\n\nexport default function Tasks() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const contacts = useSelector(selectContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <h2>Phonebook</h2>\n      <ContactForm />\n      {contacts.length === 0 && <p>You don't have any saved contacts yet</p>}\n      {contacts.length > 0 && <Filter />}\n      {isLoading && !error && <p>Refreshing...</p>}\n      {contacts.length > 0 && <ContactList />}\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","Div","styled","Filter","dispatch","useDispatch","value","useSelector","InputLabel","htmlFor","type","onChange","e","setFilter","currentTarget","id","startAdornment","InputAdornment","position","AccountCircle","List","Item","NameDiv","ContactList","generator","AvatarGenerator","visiableContacts","contact","name","toLowerCase","includes","map","number","Avatar","alt","src","generateRandomAvatar","IconButton","onClick","deleteContact","Delete","Form","FormikForm","ErrorMessage","Error","DivButton","Button","Input","Label","yup","this","matches","Schema","shape","validation","required","numeric","ContactForm","useState","setName","setNumber","initialValues","validationSchema","onSubmit","values","isExist","find","window","alert","addContact","as","component","variant","endIcon","Send","disabled","Tasks","useEffect","fetchContacts","Helmet","length"],"sourceRoot":""}